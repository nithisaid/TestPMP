*   **Input Validation:** เพิ่มการตรวจสอบความถูกต้องของเลขที่บัญชี เพื่อป้องกันการป้อนข้อมูลที่ไม่ถูกต้องหรือเป็นอันตราย
*   **Authentication:** เพิ่มกลไกการยืนยันตัวตนของผู้ใช้ด้วย JWT (JSON Web Tokens) เพื่อให้แน่ใจว่ามีเพียงผู้ใช้ที่ได้รับอนุญาตเท่านั้นที่สามารถเข้าถึงข้อมูลได้
*   **Error Handling:** ปรับปรุงการจัดการข้อผิดพลาดให้ครอบคลุมมากขึ้น เพื่อป้องกันการเปิดเผยข้อมูลสำคัญของระบบ

## **โค้ด Node.js ที่ได้รับการแก้ไขทั้งหมด:**

```javascript
const express = require('express');
const app = express();
const bcrypt = require('bcrypt'); // For password hashing
const jwt = require('jsonwebtoken'); // For JWT authentication
const { body, validationResult } = require('express-validator'); // For input validation

// ตัวอย่างข้อมูลบัญชี (จำลอง)
const accounts = [
    { accountNumber: '1234567890', accountType: 'ออมทรัพย์', balance: 50000 },
    { accountNumber: '9876543210', accountType: 'กระแสรายวัน', balance: 100000 }
];

// ตัวอย่างข้อมูลธุรกรรม (จำลอง)
const transactions = [
    { accountNumber: '1234567890', date: '05/01/2567', type: 'ฝาก', amount: 10000 },
    { accountNumber: '1234567890', date: '12/02/2567', type: 'ถอน', amount: 5000 },
    // ... ธุรกรรมอื่นๆ
];

// Middleware สำหรับ input validation
const validateAccountNumber = [
  body('accountNumber').isNumeric().withMessage('เลขที่บัญชีต้องเป็นตัวเลขเท่านั้น'),
];

// Middleware สำหรับ authentication (ตัวอย่าง: JWT)
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (token == null) return res.sendStatus(401);

  jwt.verify(token, 'your_secret_key', (err, user) => { // Replace 'your_secret_key' with a strong secret
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

// API endpoint สำหรับดึงข้อมูลบัญชี (เพิ่ม input validation และ authentication)
app.get('/api/accounts/:accountNumber', validateAccountNumber, authenticateToken, (req, res) => {
  // ตรวจสอบ input validation errors
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  const accountNumber = req.params.accountNumber;
  const account = accounts.find(acc => acc.accountNumber === accountNumber);
  if (account) {
    res.json(account);
  } else {
    res.status(404).json({ error: 'ไม่พบข้อมูลบัญชี' });
  }
});

// API endpoint สำหรับดึงข้อมูลธุรกรรม (เพิ่ม authentication)
app.get('/api/transactions/:accountNumber', authenticateToken, (req, res) => {
  const accountNumber = req.params.accountNumber;
  const accountTransactions = transactions.filter(trans => trans.accountNumber === accountNumber);
  res.json(accountTransactions);
});

// ... API endpoints อื่นๆ (เช่น ดึงข้อมูลพร้อมเพย์, สินเชื่อ)

app.listen(3000, () => {
  console.log('Server listening on port 3000');
});
```

**หมายเหตุ:** โปรดทราบว่าโค้ดนี้เป็นเพียงตัวอย่าง และควรได้รับการปรับปรุงเพิ่มเติมเพื่อให้เหมาะสมกับสภาพแวดล้อมการใช้งานจริงและมาตรฐานความปลอดภัยที่เข้มงวดกว่านี้
